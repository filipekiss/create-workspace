#!/usr/bin/env node
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading wasm modules
/******/ 	var installedWasmModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// object with all compiled WebAssembly.Modules
/******/ 	__webpack_require__.w = {};
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 13);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("chalk");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(__webpack_require__(0));

var _logSymbols = _interopRequireDefault(__webpack_require__(9));

var _templateObject = /*#__PURE__*/ _taggedTemplateLiteral([" {red ", "} ", ""]),
    _templateObject2 = /*#__PURE__*/ _taggedTemplateLiteral([" {blue ", "} ", ""]),
    _templateObject3 = /*#__PURE__*/ _taggedTemplateLiteral([" {yellow ", "} ", ""]),
    _templateObject4 = /*#__PURE__*/ _taggedTemplateLiteral([" {green ", "} ", ""]);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _default = {
  error: function error(message) {
    console.error((0, _chalk.default)(_templateObject, _logSymbols.default.error, message));
  },
  info: function info(message) {
    console.log((0, _chalk.default)(_templateObject2, _logSymbols.default.info, message));
  },
  warning: function warning(message) {
    console.log((0, _chalk.default)(_templateObject3, _logSymbols.default.warning, message));
  },
  success: function success(message) {
    console.log((0, _chalk.default)(_templateObject4, _logSymbols.default.success, message));
  }
};
exports.default = _default;

/***/ }),
/* 2 */
/***/ (function(module) {

module.exports = {"devDependencies":{"@babel/core":"^7.0.0-beta.44","@babel/preset-env":"^7.0.0-beta.44","@babel/register":"^7.0.0-beta.44","babel-loader":"^8.0.0-beta","concurrently":"^3.5.1","node-sass":"^4.8.3","webpack":"^4.6.0","webpack-cli":"^2.0.15","webpack-manifest-plugin":"^2.0.1","xo":"^0.20.3"},"scripts":{"start":"concurrently -p \"[{name}]\" -n \"scripts,styles \" -c \"bgBlue.bold,bgMagenta.bold\" \"yarn run scripts:watch\" \"yarn run styles:watch\"","styles:watch":"node-sass --watch src/styles --output dist/styles --source-comments --recursive","scripts:watch":"webpack --mode development --watch","lint":"xo --fix"},"xo":{"prettier":true},"babel":{"presets":["@babel/preset-env"]},"prettier":{"useTabs":false,"tabWidth":4,"semi":true,"singleQuote":true,"trailingComma":"es5"},"dependencies":{}};

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("fs-extra");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("execa");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("listr");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(__webpack_require__(7));

var _os = _interopRequireDefault(__webpack_require__(6));

var _listr = _interopRequireDefault(__webpack_require__(5));

var _chalk = _interopRequireDefault(__webpack_require__(0));

var _execa = _interopRequireDefault(__webpack_require__(4));

var _fsExtra = _interopRequireDefault(__webpack_require__(3));

var _log = _interopRequireDefault(__webpack_require__(1));

var _workspace = _interopRequireDefault(__webpack_require__(2));

var _templateObject = /*#__PURE__*/ _taggedTemplateLiteral(["Creating Workspace at {green ", "}"]);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Jonathan =
/*#__PURE__*/
function () {
  function Jonathan() {
    var projectPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Jonathan);

    if (projectPath) {
      return;
    }

    throw new Error('You need to specify the path to install the project');
  }

  _createClass(Jonathan, [{
    key: "isSafeToCreateProjectIn",
    value: function isSafeToCreateProjectIn(root, name) {
      var validFiles = ['.DS_Store', 'Thumbs.db', '.git', '.gitignore', '.idea', 'README.md', 'LICENSE', 'web.iml', '.hg', '.hgignore', '.hgcheck', '.npmignore', 'mkdocs.yml', 'docs', '.travis.yml', '.gitlab-ci.yml', '.gitattributes'];

      var conflicts = _fsExtra.default.readdirSync(root).filter(function (file) {
        return !validFiles.includes(file);
      });

      if (conflicts.length > 0) {
        _log.default.warning("The directory ".concat(_chalk.default.green(name), " contains files that could conflict:"));

        console.log();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = conflicts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var file = _step.value;
            console.log("  ".concat(file));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        console.log();
        return false;
      }

      return true;
    }
  }, {
    key: "makeProject",
    value: function makeProject(at, from) {
      var root = _path.default.resolve(at);

      var appName = _path.default.basename(root);

      _fsExtra.default.ensureDirSync(root);

      if (!this.isSafeToCreateProjectIn(root, appName)) {
        throw new Error('Either try using a new directory name, or remove the files listed above.');
      }

      var packageJson = {
        name: appName,
        version: '0.1.0',
        private: true
      };

      _fsExtra.default.writeFileSync(_path.default.join(root, 'package.json'), JSON.stringify(Object.assign(packageJson, _workspace.default), null, 2) + _os.default.EOL);

      if (!_fsExtra.default.existsSync("".concat(root, "/.git"))) {
        _execa.default.sync('git', ['init'], {
          cwd: root
        });
      }

      var installTask = new _listr.default([{
        title: (0, _chalk.default)(_templateObject, root),
        task: function task() {
          return new _listr.default([{
            title: 'Installing dependencies',
            task: function task() {
              return _execa.default.stdout('yarnpkg', {
                cwd: root
              });
            }
          }, {
            title: 'Basic .gitignore',
            task: function task() {
              return new Promise(function (resolve, reject) {
                try {
                  _fsExtra.default.ensureFileSync("".concat(root, "/.gitignore"));

                  var ignored = Array.from(_fsExtra.default.readFileSync("".concat(root, "/.gitignore"), 'utf8').split('\n'));
                  var ignorables = ['dist', 'node_modules', 'yarn.lock'];
                  var missingIgnorables = ignorables.filter(function (ignorable) {
                    return !ignored.includes(ignorable);
                  });
                  missingIgnorables.forEach(function (ignorable) {
                    _fsExtra.default.appendFileSync("".concat(root, "/.gitignore"), ignorable + _os.default.EOL, function (err) {
                      if (err) throw err;
                    });
                  });
                  resolve();
                } catch (err) {
                  reject(err);
                }
              });
            }
          }, {
            title: 'Initial Commit!',
            task: function task() {
              return new Promise(function (resolve, reject) {
                try {
                  _execa.default.sync('git', ['add', '.'], {
                    cwd: root
                  });

                  _execa.default.sync('git', ['add', '.gitignore'], {
                    cwd: root
                  });

                  _execa.default.sync('git', ['commit', '--no-gpg-sign', '--no-verify', '--message', 'Initial Commit :tada:'], {
                    cwd: root
                  });

                  resolve();
                } catch (err) {
                  reject(err);
                }
              });
            }
          }]);
        }
      }, {
        title: 'Configuring Webpack',
        task: function task() {
          return _fsExtra.default.copy("".concat(from, "/src/static/webpack.config.babel.js"), "".concat(root, "/webpack.config.babel.js"));
        }
      }], {
        concurrent: true
      });
      installTask.run().then(function () {
        _log.default.success('Done!');
      });
    }
  }]);

  return Jonathan;
}();

var _default = Jonathan;
exports.default = _default;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("log-symbols");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("meow");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _meow = _interopRequireDefault(__webpack_require__(10));

var _log = _interopRequireDefault(__webpack_require__(1));

var _jonathan = _interopRequireDefault(__webpack_require__(8));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cli = (0, _meow.default)("\n    USAGE:\n\n    $ yarn create @filipekiss/webpack-sass\n        ", {
  autoVersion: false
});
var projectPath = cli.input[0];

if (cli.flags.version) {
  console.log(" ".concat(cli.pkg.name));

  _log.default.info(" Version: ".concat(cli.pkg.version));

  process.exit(0);
}

try {
  var cwd = process.cwd();
  var builder = new _jonathan.default(projectPath, cli.flags);
  builder.makeProject(projectPath, cwd);
} catch (err) {
  _log.default.error(err.message);

  process.exit(1);
}

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("babel-polyfill");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(12);
module.exports = __webpack_require__(11);


/***/ })
/******/ ]);